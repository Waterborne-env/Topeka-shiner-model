 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 ;                Generalized Unified Threshold model of Survival (GUTS) - based on Jager et al. 2011, Ashauer et al. 2013
 ;								Modified from code provided by Nika Galic (from Modellink case study)
 ;                Implements the effects in the *** Effects Module, August 2019 ***
 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 ;;; - GUTS-SD and GUTS-IT models for mortality calibrated to solatenol toxicity study (96h exposure) (Ashauer et al. 2013)
 ;   - assuming first order kinetics of both toxicokinetics and toxicodynamics 
 ;   - dose metric - scaled internal concentration - Ci
 ;   - parameters of GUTS-SD: ke - elimination rate [1 / d]
 ;                 			  kk - killing rate     [l / ug * d]
 ;                 			  z  - threshold  		[ug / L] 
 ;   - parameters of GUTS-IT: ke - elimination rate [1 / d]
 ;							  alpha - median of the threshold distribution [ug / L]
 ;							  beta -  shape parameter of the distribution (unitless)
 ;
to GUTS_SD   ;; reduced Stochastic Death (SD) model - the scaled internal concentration is used as the dose metric
			 ;; parametes from the solatenol study by Ashauer et al. 2013 for fathead minnow
  
	; time step in GUTS model by Ashauer et al. 2013: guts_dt = 1 day
  ; the following parameters are set on the interface:
;	set guts_n 1 ; increase time steps in GUTS model as needed (guts_n defines the time steps per day)
         let ke GUTS-SD-ke ;; 1.28  ;; 1/d ;; besttest_fish_growth_unlimprey_sl0_11Sep2019a.txt fit value: 1.28; 95% confidence limits: 0.87, 2.64
         let kk GUTS-SD-kk ;; 0.42 ;; L/(ug * d) ;; best fit value: 0.42; 95% confidence limits: 0.2, 0.77
         let z GUTS-SD-z ;; 3.85 ;; ug/L ;; best fit value: 3.85; 95% confidence limits: 3.25, 4.2
  
;;       ask turtles-here [
     
  ; rename some variables to match terminology in paper
     let Cw pesticideConcentration            ; water conc --> [ug/L]
     let Ci t_intConc_GUTS   	  ; scaled internal conc --> [ug/L]
     let dHdt 0.0                 ; hazard rate    ------> [1/d]

 ; initialize local variables
 
     let dCi_dt 0.0
       
      
    repeat guts_n  [
   
      ; calculate derivatives (change per day)
                   
      set dCi_dt (ke * (Cw - Ci))
      
      ; effectuate change over GUTS timestep 
      set Ci (Ci + (1 / guts_n) * dCi_dt) 
     
      ; to avoid the worst instabilities....
      if Ci < 0.0 [set Ci 0.0]
         
      ; calculate hazard rate based on new Ci value
      ; dHdt is a rate expressed 1/d. To get the rate 
      ; in GUTS timestep multiply it by guts_n (time steps per day)
      
    let dHdt_n 0
    if (Ci - z) > 0 [ set dHdt_n (kk * (Ci - z)) ]
	  set dHdt dHdt + (1 / guts_n) * dHdt_n
	]
	
 	let survival_prob e ^ ((-1) * dHdt)
    if (random-float 1.0 > survival_prob) [
		set guts_deathcount guts_deathcount + 1
        die
		]
    
    ;store the end of the day values for Ci
    set t_intConc_GUTS Ci
 
end

to GUTS_IT ; GUTS-IT implemented to act on individual internal concentration thresholds 
	let ke GUTS-IT-ke ; 0.47 ; 1/d
	let alpha GUTS-IT-a ; 3.97 ; ug/L
	let beta GUTS-IT-b ;5.54  
 
  ; rename some variables to match terminology in paper
  let Cw pesticideConcentration            ; water conc --> [ug/L]
  let Ci_IT t_intConc_GUTS   	  ; scaled internal conc --> [ug/L]
  let dHdt 0.0                 ; hazard rate    ------> [1/d]

	let dCi_dt_IT 0
	let F_t 0
	let S_IT 1

  repeat guts_n  [
;		set F_t 1 / (1 + (max [list_delta_Ci] / alpha) ^ ((-1) * beta))
;		S_IT (1 - F_t)
		if (Ci_IT >= guts_it_thresh) [
			set guts_deathcount guts_deathcount + 1
			die	
			]
		
		set dCi_dt_IT ke * (Cw - Ci_IT)
		set Ci_IT  Ci_IT + (1 / guts_n) * dCi_dt_IT
		if (Ci_IT < 0.0) [ set Ci_IT 0.0 ]
	]
  
  set t_intConc_GUTS Ci_IT
end

to-report intConc_GUTS
  report mean [t_intConc_GUTS] of turtles
end

;; new; in the works
to-report sublethal_TKTD 
  let ke TKTD-sl-ke ; defined on interface ; uptake constant for toxicokinetics; calculation internal concentration
  let c_T TKTD-sl-cT ; defined on interface ; tolerance gradient for toxicodynamics; calculation of stress level 
  let SLm TS_max_SL ; defined on interface ; 53.2 mm ; maximum length of Topeka shiner (average length at 3 yrs old)
  
  let step_consumption 0
  let W_local W ; weight of fish, recalculated within this procedure to simulate sub-daily time steps
  let SL_local SL ; standard length of fish, recalculated within this procedure to simulate sub-daily time steps
  let SL_prev SL ; fish standard length [mm] in previous time step 
  let dSL_dt 0 ; change of fish SL [mm] in sub-daily time step
  
  let c_0 TKTD-NOEC ; NOEC for growth [ug/L] ; defined on interface
  let c_d pesticideConcentration ; water concentration of pesticide [ug/L] ; read from input file
  let c_v t_intConc_sublethal ; scaled internal concentration [ug/L]
  let dcv_dt 0 ; change of c_v per sub-daily time step
  let stress 0 ; stress level (s): proportion by which Cmax of the fish is reduced due to pesticide exposure
    
  repeat guts_n [
    set dSL_dt SL_local - SL_prev
 ;   type "SL: prev, current, dS_dt: " type SL_prev type ", " type SL_local type ", " print dSL_dt
    set dcv_dt ke * (SLm / SL_local) * (c_d - c_v) - c_v * (3 / SL_local) * dSL_dt ; calculation of change in scaled internal concentration 
                                                                                   ; dependent on external concentration and fish length
    set c_v c_v + dcv_dt ; scaled internal concentration
    ; calculation of stress level dependent on scaled internal concentration
    ifelse (c_v > c_0) 
    [ set stress min ( list ((c_v - c_0) / c_T) 1.0 ) ] ; stress level cannot be larger than 1 (stress = 1 means no consumption occurs)
    [ set stress 0 ] ; added this
 ;   type "dcv_dt: " type dcv_dt type ", c_v: " type c_v type ", stress: " print stress
    set SL_prev SL_local
    set step_consumption (functional_response_TKTD stress W_local SL_local) ; calculate consumption per sub-daily time step including reduced Cmax
    set W_local (grow_TKTD step_consumption W_local) ; calculate sub-daily growth based on consumption
    set SL_local (calc_length W_local) ; calculate fish SL from its weight
  ]
  
  set t_intConc_sublethal c_v
  ;type "W_local: " type W_local type ", SL_local: " type SL_local type ", internal conc: " type c_v type ", stress: " print stress
  report stress
end

to-report functional_response_TKTD [ stress W_local SL_local ]
  ; simplified procedure to be run on sub-daily time steps for sublethal TKTD model (acting via Cmax)
  ; consumption is based on wet weight (of prey)
  ; Subadults and adults are assumed to have identical diet preferences; juveniles are assumed to eat a different set of food web guilds

  let step_consumption 0 ; in J
;  let Cmax_t 0 ; in J / g wet weight of TS
  let ww_Cmax_juv 0 ; in g wet weight of prey / g wet weight of TS
  let ww_Cmax_adt 0 ; in g wet weight of prey / g wet weight of TS

  ; scaling factors of search area/volume dependent of fish SL in functional response
  ; factors are divided by pondArea/Volume because prey biomasses in functional response implementation below are stated as biomasses in the whole waterbody
  let cfa (ScalingSearchArea * (SL_local / 1000) ^ (3 / 4)) / pondArea ; daily area of TS foraging (dependent on fish length): area used for ground-dwelling prey and detritus
  let cfv (ScalingSearchArea * (SL_local / 1000) ^ (3 / 4)) / pondVolume ; daily volume of TS foraging (dependent on fish length): volume used for prey found in water column

  ; temperature dependence of consumption
  let Cmax_t (a_cmax * (W_local ^ b_cmax) * fC_T) * (1 - stress); Cmax per g fish weight
;    type "Cmax_t: " type Cmax_t type ", fC_T: " print fC_T; for testing
  
;  type "fish stage: " type stage type ", Cmax: " print Cmax_t ; for testing
  ifelse stage = "juvenile" [ ; consumption (in J) of juvenile TS
    set ww_Cmax_juv Cmax_t

    ; Consumption per prey type dependent on prey biomass
    let sum_rel_C juv_pref_copepods * juv_ass_copepods * juv_h_copepods * w_copepods * cfv
                + juv_pref_cladocerans * juv_ass_cladocerans * juv_h_cladocerans * w_cladocerans * cfv
                + juv_pref_rotifers * juv_ass_rotifers * juv_h_rotifers * w_rotifers * cfv
                + juv_pref_microzoo * juv_ass_microzoo * juv_h_microzoo * w_microzoo * cfv
                + juv_pref_detritus * juv_ass_detritus * juv_h_detritus * w_detritus * cfa; (SedimentPOC) ; assumption that fish can access less area of detritus for daily consumption

   ; consumption rates in g prey guild per fish and day
   let C_copepods W_local * ww_Cmax_juv * (juv_pref_copepods * juv_ass_copepods * juv_h_copepods * w_copepods * cfv) / sum_rel_C ; (1 + sum_rel_C)
   let C_cladocerans W_local * ww_Cmax_juv * (juv_pref_cladocerans * juv_ass_cladocerans * juv_h_cladocerans * w_cladocerans * cfv) / sum_rel_C ; (1 + sum_rel_C)
   let C_rotifers W_local * ww_Cmax_juv * (juv_pref_rotifers * juv_ass_rotifers * juv_h_rotifers * w_rotifers * cfv) / sum_rel_C ; (1 + sum_rel_C)
   let C_microzoo W_local * ww_Cmax_juv * (juv_pref_microzoo * juv_ass_microzoo * juv_h_microzoo * w_microzoo * cfv) / sum_rel_C ; (1 + sum_rel_C)
   let C_detritus W_local * ww_Cmax_juv * (juv_pref_detritus * juv_ass_detritus * juv_h_detritus * w_detritus * cfa) / sum_rel_C ; (1 + sum_rel_C) ; (SedimentPOC)

   if (C_cladocerans < 0 or C_copepods < 0 or C_rotifers < 0 or C_microzoo < 0 or C_detritus < 0) [ ; (SedimentPOC)
     user-message "WARNING: negative consumption by juvenile"
   ]
   ; reduction in prey guild biomasses not applied here

    ; daily consumption of the juvenile (in J):
    set step_consumption ((C_copepods * ED_copepods) + (C_cladocerans * ED_cladocerans) + (C_rotifers * ED_rotifers)
      + (C_microzoo * ED_microzoo) + (C_detritus * ED_detritus)) / guts_n

  ] [ ; consumption of adult TS
    set ww_Cmax_adt Cmax_t

  ; Consumption per prey type dependent on prey biomass
    let sum_rel_C adt_pref_copepods * adt_ass_copepods * adt_h_copepods * w_copepods * cfv
                + adt_pref_cladocerans * adt_ass_cladocerans * adt_h_cladocerans * w_cladocerans * cfv
                + adt_pref_mayflies * adt_ass_mayflies * adt_h_mayflies * w_mayflies * cfa ;  (Ephemeroptera)
                + adt_pref_caddisflies * adt_ass_caddisflies * adt_h_caddisflies * w_caddisflies * cfa ; (Trichoptera)
                + adt_pref_oligochaetes * adt_ass_oligochaetes * adt_h_oligochaetes * w_oligochaetes * cfa
                + adt_pref_chironomids * adt_ass_chironomids * adt_h_chironomids * w_chironomids * cfa
                + adt_pref_detritus * adt_ass_detritus * adt_h_detritus * w_detritus * cfa ; (SedimentPOC) ; assumption that fish can access less area of detritus for daily consumption
                + adt_pref_periphyton * adt_ass_periphyton * adt_h_periphyton * w_periphyton * cfv

  ; consumption rates in g prey/ g fish and day
    let C_copepods W_local * ww_Cmax_adt * (adt_pref_copepods * adt_ass_copepods * adt_h_copepods * w_copepods * cfv) / sum_rel_C ; (1 + sum_rel_C)
    let C_cladocerans W_local * ww_Cmax_adt * (adt_pref_cladocerans * adt_ass_cladocerans * adt_h_cladocerans * w_cladocerans * cfv) / sum_rel_C ; (1 + sum_rel_C)
    let C_mayflies W_local * ww_Cmax_adt * (adt_pref_mayflies * adt_ass_mayflies * adt_h_mayflies * w_mayflies * cfa) / sum_rel_C ; (1 + sum_rel_C) ;  (Ephemeroptera)
    let C_caddisflies W_local * ww_Cmax_adt * (adt_pref_caddisflies * adt_ass_caddisflies * adt_h_caddisflies * w_caddisflies * cfa) / sum_rel_C ; (1 + sum_rel_C) ; (Trichoptera)
    let C_oligochaetes W_local * ww_Cmax_adt * (adt_pref_oligochaetes * adt_ass_oligochaetes * adt_h_oligochaetes * w_oligochaetes * cfa) / sum_rel_C ; (1 + sum_rel_C)
    let C_chironomids W_local * ww_Cmax_adt * (adt_pref_chironomids * adt_ass_chironomids * adt_h_chironomids * w_chironomids * cfa) / sum_rel_C ; (1 + sum_rel_C)
    let C_detritus W_local * ww_Cmax_adt * (adt_pref_detritus * adt_ass_detritus * adt_h_detritus * w_detritus * cfa) / sum_rel_C ; (1 + sum_rel_C) ; (SedimentPOC)
    let C_periphyton W_local * ww_Cmax_adt * (adt_pref_periphyton * adt_ass_periphyton * adt_h_periphyton * w_periphyton * cfv) / sum_rel_C ; (1 + sum_rel_C)

  if (C_copepods < 0 or C_cladocerans < 0 or C_mayflies < 0 or C_caddisflies < 0 or C_oligochaetes < 0 or C_chironomids < 0 or C_detritus < 0 or C_periphyton < 0) [
    user-message "WARNING: negative consumption by adults"
  ]
   ; reduction in prey guild biomasses not applied here

    ; daily consumption by adult TS (in J)
    set step_consumption ((C_copepods * ED_copepods) + (C_cladocerans * ED_cladocerans) + (C_mayflies * ED_mayflies) + (C_caddisflies * ED_caddisflies)
                      + (C_oligochaetes * ED_oligochaetes) + (C_chironomids * ED_chironomids) + (C_detritus * ED_detritus) + (C_periphyton * ED_periphyton)) / guts_n
  ]

  ; type "Cmax: " type Cmax_t type ", consumption: " type step_consumption type ", daily consumption: " print step_consumption * guts_n
  report step_consumption
end

to-report grow_TKTD [ step_consumption W_local ]
  ; procedure implements growth according to fish bioenergetics
  ; consumption has been determined in functional response procedure

  ; respiration in J / g wet weight TS (applying oxycalorific coefficient)
  let R_T_local (RA * (W_local ^ RB) * fR_T) * OxycalCoeff / guts_n
  ; specific dynamic action in J / g wet weight TS (note: step_consumption is in J per TS)
  let S_local SDA * (step_consumption / W_local) * (1 - FA) / guts_n
  ; waste losses in J / g wet weight TS
  let E_C_local (FA * (step_consumption / W_local)) + (UA * ((step_consumption / W_local) - (FA * (step_consumption / W_local)))) / guts_n

  let d_W_local 0
  ; Resulting growth
  ifelse stage = "larva" or stage = "juvenile" [
    set d_W_local W_local * (((step_consumption / W_local) - (R_T_local + S_local) - E_C) / ED_TS_juv)
  ] [
    set d_W_local W_local * (((step_consumption / W_local) - (R_T_local + S_local) - E_C) / ED_TS_adt)
  ]

  set W_local W_local + d_W_local ; apply weight change

  ; stage transition not applied here.
  report W_local
end
